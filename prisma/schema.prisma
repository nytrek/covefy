generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        String     @id @unique
  name      String
  imageUrl  String
  username  String
  credits   Int
  claim     Boolean    @default(false)
  premium   Boolean    @default(false)
  plan      Plan       @default(FREE)
  posts     Post[]     @relation("Author")
  likes     Like[]
  bookmarks Bookmark[]
  sender    Friend[]   @relation("Sender")
  receiver  Friend[]   @relation("Receiver")
  inbox     Post[]     @relation("Friend")
  Comment   Comment[]
}

model Post {
  id             Int        @id @default(autoincrement())
  createdAt      DateTime   @default(now())
  title          String     @db.VarChar(100)
  description    String     @db.VarChar(720)
  label          Label      @default(PUBLIC)
  likes          Like[]
  attachment     String?
  attachmentPath String?
  bookmarks      Bookmark[]
  author         Profile    @relation("Author", fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  friend         Profile?   @relation("Friend", fields: [friendId], references: [id], onDelete: Cascade)
  friendId       String?
  comments       Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  comment   String   @db.VarChar(720)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}

model Like {
  postId    Int
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([postId, profileId])
}

model Bookmark {
  postId    Int
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@id([postId, profileId])
}

model Friend {
  sender     Profile  @relation("Sender", fields: [senderId], references: [id], onDelete: Cascade)
  senderId   String
  receiver   Profile  @relation("Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  receiverId String
  status     Status   @default(PENDING)
  createdAt  DateTime @default(now())

  @@id([receiverId, senderId])
}

enum Plan {
  FREE
  BASIC
  PREMIUM
  ENTERPRISE
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Label {
  PUBLIC
  PRIVATE
}
